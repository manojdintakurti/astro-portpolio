---
// src/layouts/Layout.astro
import CustomCursor from '../components/effects/CustomCursor';
import ClientThemeProvider from '../components/theme/ClientThemeProvider';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import ScrollToTop from '../components/ScrollToTop.astro';
import { Toaster } from 'react-hot-toast';
import 'aos/dist/aos.css';

interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = "Sai Manoj Dintakurti - Full Stack Developer Portfolio" 
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <link rel="icon" type="image/svg+xml" href="/SM.webp" />
    <title>{title}</title>

    <script is:inline>
      (function() {
        function getInitialTheme() {
          const savedTheme = localStorage.getItem('theme');
          if (savedTheme) {
            return savedTheme;
          }
          return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        const theme = getInitialTheme();
        
        document.documentElement.classList.remove('light', 'dark');
        document.documentElement.classList.add(theme);
        localStorage.setItem('theme', theme);
      })();
    </script>
  </head>
  <body>
    <ClientThemeProvider client:load>
      <div class="min-h-screen flex flex-col relative bg-white dark:bg-gray-900">
        <CustomCursor client:only="react" />
        <Navbar />
        <main class="flex-1">
          <slot />
        </main>
        <Footer />
        <ScrollToTop />
        <!-- Added Toaster component -->
        <Toaster
          client:load
          position="bottom-right"
          toastOptions={{
            className: '',
            style: {
              background: 'var(--toast-bg)',
              color: 'var(--toast-color)',
              border: '1px solid var(--toast-border)',
            },
            success: {
              duration: 5000,
              iconTheme: {
                primary: '#10B981',
                secondary: '#FFFFFF',
              },
            },
            error: {
              duration: 5000,
              iconTheme: {
                primary: '#EF4444',
                secondary: '#FFFFFF',
              },
            },
          }}
        />
      </div>
    </ClientThemeProvider>

    <script is:inline>
      // Add CSS variables for toast themes
      function updateToastTheme() {
        const isDark = document.documentElement.classList.contains('dark');
        document.documentElement.style.setProperty('--toast-bg', isDark ? '#1F2937' : '#FFFFFF');
        document.documentElement.style.setProperty('--toast-color', isDark ? '#FFFFFF' : '#000000');
        document.documentElement.style.setProperty('--toast-border', isDark ? '#374151' : '#E5E7EB');
      }

      // Initial theme setup
      updateToastTheme();

      // Update theme when it changes
      document.addEventListener('theme-change', updateToastTheme);
    </script>

    <script define:vars={{ someVar: 'value' }}>
      // Create a separate module for AOS initialization
      const initializeAOS = async () => {
        try {
          const AOS = (await import('aos')).default;
          const aos = AOS;

          aos.init({
            duration: 800,
            once: true,
            offset: 100,
            easing: 'ease-out-cubic',
            delay: 50,
            disable: window.innerWidth < 768,
            mirror: false,
            anchorPlacement: 'top-bottom',
          });

          return aos;
        } catch (error) {
          console.error('Error initializing AOS:', error);
          return null;
        }
      };

      let aosInstance = null;
      let resizeTimer = null;

      // Initialize AOS on page load
      document.addEventListener('astro:page-load', async () => {
        aosInstance = await initializeAOS();
      });

      // Refresh AOS on view transitions
      document.addEventListener('astro:after-swap', () => {
        if (aosInstance) {
          aosInstance.refresh();
        }
      });

      // Handle theme changes
      document.addEventListener('theme-change', () => {
        if (aosInstance) {
          setTimeout(() => {
            aosInstance.refresh();
          }, 300);
        }
      });

      // Handle resize events
      window.addEventListener('resize', () => {
        if (resizeTimer) {
          clearTimeout(resizeTimer);
        }
        
        resizeTimer = setTimeout(() => {
          if (aosInstance) {
            aosInstance.refresh();
          }
        }, 250);
      });
    </script>
  </body>
</html>