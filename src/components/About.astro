---
import { Icon } from 'astro-icon/components';


interface Skill {
  name: string;
  icon: string;
  className?: string;
}

interface SkillCategory {
  category: string;
  description: string;
  skills: Skill[];
}

interface Achievement {
  number: string;
  label: string;
  icon: string;
  color: string;
}

const skills: SkillCategory[] = [
  {
    category: "Frontend Development",
    description: "Building responsive and interactive user interfaces",
    skills: [
      { name: "React", icon: "logos:react" },
      { name: "TypeScript", icon: "logos:typescript-icon" },
      { name: "Tailwind", icon: "logos:tailwindcss-icon" },
      { name: "Angular", icon: "logos:angular-icon" },
      { name: "HTML5", icon: "logos:html-5" },
      { name: "CSS3", icon: "logos:css-3" },
      { name: "Bootstrap", icon: "logos:bootstrap" },
      { name: "jQuery", icon: "logos:jquery" , className: "dark:bg-white dark:p-1 dark:rounded"},
      { name: "Astro", icon: "logos:astro-icon", className: "dark:invert dark:brightness-150 dark:contrast-150" }
    ]
  },
  {
    category: "Backend Development",
    description: "Creating highly scalable server-side applications",
    skills: [
      { name: "Java", icon: "logos:java" },
      { name: "Spring Boot", icon: "logos:spring" },
      { name: "REST API", icon: "mdi:api", className: "dark:bg-white dark:p-1 dark:rounded"},
      { name: "Node.js", icon: "logos:nodejs-icon" },
      { name: "Python", icon: "logos:python" },
      { name: "MongoDB", icon: "logos:mongodb-icon" },
      {name: "Express", icon: "logos:express", className: "dark:bg-white dark:p-1 dark:rounded"},
      { name: "MySQL", icon: "logos:mysql" },
      {name:"PostgreSQL", icon: "logos:postgresql"}
    ]
  },
  {
    category: "Cloud & CI/CD Tools",
    description: "Optimizing development and deployment workflows",
    skills: [
      { name: "AWS", icon: "logos:aws", className: "dark:bg-white dark:p-1 dark:rounded" },
      { name: "Docker", icon: "logos:docker-icon" },
      { name: "Kubernetes", icon: "logos:kubernetes" },
      { name: "Git", icon: "logos:git-icon" },
      { name: "BitBucket", icon: "logos:bitbucket" },
      { name: "Gradle", icon: "logos:gradle" },
      { name: "Jenkins", icon: "logos:jenkins" },
      { name: "Bamboo", icon: "logos:bamboo" },
      { name: "Postman", icon: "logos:postman-icon" }
    ]
  }
];

//
// const skills: SkillCategory[] = [
//   {
//     category: "Frontend Development",
//     description: "Building responsive and interactive user interfaces",
//     skills: [
//       { name: "React", icon: "logos:react" },
//       { name: "Next.js", icon: "logos:nextjs-icon", className: "dark:invert" },
//       { name: "TypeScript", icon: "logos:typescript-icon" },
//       { name: "Tailwind", icon: "logos:tailwindcss-icon" },
//       { name: "Angular", icon: "logos:angular-icon" },
//       { name: "Astro", icon: "logos:astro-icon", className: "dark:invert dark:brightness-150 dark:contrast-150" }
//     ]
//   },
//   {
//     category: "Backend Development",
//     description: "Creating highly scalable server-side applications",
//     skills: [
//       { name: "Node.js", icon: "logos:nodejs-icon" },
//       { name: "Python", icon: "logos:python" },
//       { name: "GraphQL", icon: "logos:graphql" },
//       { name: "MongoDB", icon: "logos:mongodb-icon" },
//       { name: "PostgreSQL", icon: "logos:postgresql" },
//       { name: "NestJS", icon: "logos:nestjs" }
//     ]
//   },
//   {
//     category: "Tools & DevOps",
//     description: "Optimizing development and deployment workflows",
//     skills: [
//       { name: "Git", icon: "logos:git-icon" },
//       { name: "Docker", icon: "logos:docker-icon" },
//       { name: "AWS", icon: "logos:aws", className: "dark:bg-white dark:p-1 dark:rounded" },
//       { name: "Firebase", icon: "logos:firebase" },
//       { name: "Kubernetes", icon: "logos:kubernetes" },
//       { name: "Redis", icon: "logos:redis" }
//     ]
//   }
// ];

const achievements: Achievement[] = [
  { 
    number: "4+", 
    label: "Years Experience",
    icon: "mdi:calendar-clock",
    color: "from-blue-500 to-blue-600"
  },
  { 
    number: "5+", 
    label: "Projects Completed",
    icon: "mdi:rocket-launch",
    color: "from-green-500 to-green-600"
  },
  { 
    number: "2", 
    label: "Awards Won",
    icon: "mdi:trophy",
    color: "from-yellow-500 to-yellow-600"
  }
];
---

<section id="about" class="py-24 bg-white dark:bg-[#0B1120] transition-colors duration-300">
  <div class="container mx-auto px-4 max-w-6xl">
    <div class="text-center mb-16 animate-fade-in">
      <h2 class="text-4xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        About Me
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed">
        Full Stack Developer passionate about creating innovative web solutions and learning new technologies. 
        Focused on building scalable and performant applications that solve real-world problems.
      </p>
    </div>
    
    <div class="mb-16">
      <h3 class="text-3xl font-bold mb-8 text-center text-blue-600 dark:text-blue-400 animate-fade-in">
        Technical Skills
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-12">
        {skills.map((category, index) => (
          <div class="skill-category animate-slide-up" style={`--delay: ${index * 0.1}s`}>
            <h4 class="text-xl font-semibold mb-4 text-center text-gray-800 dark:text-gray-200">
              {category.category}
            </h4>
            <p class="text-gray-600 dark:text-gray-400 text-center mb-6 text-sm">
              {category.description}
            </p>
            <div class="grid grid-cols-3 gap-6">
              {category.skills.map((skill) => (
                <div class="group flex flex-col items-center">
                  <div class="p-2 transition-all duration-300 hover:scale-110 hover:-translate-y-1">
                    <Icon 
                      name={skill.icon} 
                      class={`w-8 h-8 ${skill.className || ''}`}
                    />
                  </div>
                  <span class="mt-2 text-xs text-gray-600 dark:text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    {skill.name}
                  </span>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>

    <div>
      <h3 class="text-3xl font-bold mb-8 text-center text-blue-600 dark:text-blue-400 animate-fade-in">
        Achievements
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        {achievements.map((achievement, index) => (
          <div class="achievement-card animate-slide-up" style={`--delay: ${index * 0.1}s`} data-number={achievement.number}>
            <div class="flex items-center justify-center gap-4">
              <div class={`p-4 rounded-2xl bg-gradient-to-br ${achievement.color}`}>
                <Icon name={achievement.icon} class="w-8 h-8 text-white" />
              </div>
              <div class="text-center">
                <h4 class="text-3xl font-bold text-gray-800 dark:text-gray-200 counter">
                  {achievement.number}
                </h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">
                  {achievement.label}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .animate-fade-in {
    opacity: 0;
    animation: fadeIn 0.6s ease-out forwards;
  }

  .animate-slide-up {
    opacity: 0;
    transform: translateY(20px);
    animation: slideUp 0.6s ease-out forwards;
    animation-delay: var(--delay, 0s);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .skill-category,
  .achievement-card {
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
</style>

<script>
  function animateCounter(element: HTMLElement, target: number): void {
    let current = 0;
    const duration = 2000;
    const step = target / (duration / 16);

    function update(): void {
      current = Math.min(current + step, target);
      element.textContent = Math.floor(current) + (current >= target ? '+' : '');
      
      if (current < target) {
        requestAnimationFrame(update);
      }
    }

    requestAnimationFrame(update);
  }

  function isHTMLElement(element: Element): element is HTMLElement {
    return element instanceof HTMLElement;
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting && isHTMLElement(entry.target)) {
        entry.target.classList.add('animate');
        
        const countElement = entry.target.querySelector('.counter');
        if (countElement instanceof HTMLElement) {
          const finalNumber = entry.target.dataset.number?.replace('+', '') || '0';
          animateCounter(countElement, parseInt(finalNumber, 10));
        }
      }
    });
  }, { threshold: 0.1 });

  document.querySelectorAll('.skill-category, .achievement-card').forEach((el) => {
    observer.observe(el);
  });
</script>